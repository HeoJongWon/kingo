[{"D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\index.js":"1","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\App.js":"2","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\components\\Navbar.js":"3","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\library\\index.js":"4","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\pages\\Login.js":"5","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\pages\\DashBoard.js":"6","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\pages\\AdminPage.js":"7","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\pages\\AllTransactions.js":"8","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\pages\\MyTransactions.js":"9","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\components\\LatestBlocks.js":"10","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\components\\WalletConnect.js":"11","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\components\\PointStatus.js":"12","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\components\\TotalPoint.js":"13","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\components\\AccountInfo.js":"14","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\components\\PointPieChart.js":"15","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\components\\MyTransactionsAll.js":"16","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\components\\LatestTransactions.js":"17","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\components\\MyTransactionsSend.js":"18","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\components\\TransactionsChart.js":"19","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\components\\MyTransactionsReceive.js":"20","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\connector\\index.js":"21"},{"size":513,"mtime":1640925398189,"results":"22","hashOfConfig":"23"},{"size":2123,"mtime":1641116665446,"results":"24","hashOfConfig":"23"},{"size":4882,"mtime":1640925398186,"results":"25","hashOfConfig":"23"},{"size":234,"mtime":1640925398190,"results":"26","hashOfConfig":"23"},{"size":139,"mtime":1640925398192,"results":"27","hashOfConfig":"23"},{"size":1007,"mtime":1640925398192,"results":"28","hashOfConfig":"23"},{"size":8546,"mtime":1640925398191,"results":"29","hashOfConfig":"23"},{"size":2392,"mtime":1640925398191,"results":"30","hashOfConfig":"23"},{"size":3046,"mtime":1640925398192,"results":"31","hashOfConfig":"23"},{"size":1052,"mtime":1640925398184,"results":"32","hashOfConfig":"23"},{"size":1347,"mtime":1640925398188,"results":"33","hashOfConfig":"23"},{"size":2483,"mtime":1640925398187,"results":"34","hashOfConfig":"23"},{"size":2133,"mtime":1640925710969,"results":"35","hashOfConfig":"23"},{"size":1695,"mtime":1640925398183,"results":"36","hashOfConfig":"23"},{"size":2584,"mtime":1640925398187,"results":"37","hashOfConfig":"23"},{"size":3245,"mtime":1640933080689,"results":"38","hashOfConfig":"23"},{"size":3577,"mtime":1640925418485,"results":"39","hashOfConfig":"23"},{"size":3057,"mtime":1640933090557,"results":"40","hashOfConfig":"23"},{"size":989,"mtime":1640925398188,"results":"41","hashOfConfig":"23"},{"size":3000,"mtime":1640933136537,"results":"42","hashOfConfig":"23"},{"size":280,"mtime":1640925398189,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"rkcgen",{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"46"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"46"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"46"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\index.js",[],["100","101"],"D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\App.js",[],"D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\components\\Navbar.js",[],"D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\library\\index.js",[],"D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\pages\\Login.js",[],"D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\pages\\DashBoard.js",["102","103","104","105"],"import {\r\n    HStack,\r\n    Text,\r\n    VStack,\r\n    Flex,\r\n    Box,\r\n    useMediaQuery,\r\n} from \"@chakra-ui/react\";\r\nimport TotalPoint from \"../components/TotalPoint\";\r\nimport PointStatus from \"../components/PointStatus\";\r\nimport PointPieChart from \"../components/PointPieChart\";\r\nimport AccountInfo from \"../components/AccountInfo\";\r\n\r\nfunction DashBoard() {\r\n    const [isLessThan1070] = useMediaQuery(\"(max-width:1070px)\");\r\n    return (\r\n        <Flex wrap=\"wrap\" w=\"full\" h=\"full\" justify=\"space-evenly\" bg=\"#E5E5E5\">\r\n            <Flex\r\n                flexGrow=\"1\"\r\n                justify=\"space-between\"\r\n                p={5}\r\n                wrap=\"wrap\"\r\n                minW=\"350px\"\r\n                w={isLessThan1070 ? \"full\" : \"60%\"}\r\n            >\r\n                <TotalPoint />\r\n                <PointStatus />\r\n                <AccountInfo />\r\n                <PointPieChart />\r\n                <PointStatus />\r\n            </Flex>\r\n        </Flex>\r\n    );\r\n}\r\n\r\nexport default DashBoard;\r\n","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\pages\\AdminPage.js",["106","107","108","109","110","111","112","113","114"],"import {\r\n    Flex,\r\n    HStack,\r\n    Text,\r\n    VStack,\r\n    Box,\r\n    Input,\r\n    Button,\r\n    FormControl,\r\n    FormLabel,\r\n    FormErrorMessage,\r\n    FormHelperText,\r\n} from \"@chakra-ui/react\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport WalletConnect from \"../components/WalletConnect\";\r\nimport moment from \"moment\";\r\nimport {useState} from \"react\"\r\n\r\nfunction AdminPage() {\r\n    const { library, account } = useWeb3React();\r\n    const signer = library?.getSigner(account).connectUnchecked();\r\n    const [input, setInput] = useState([])\r\n\r\n    const handleCreateTransaction = (event) => {\r\n        const from = event.target.parentElement.parentElement.children[1].value\r\n        const to = event.target.parentElement.parentElement.children[3].value\r\n        const point = event.target.parentElement.parentElement.children[5].value\r\n        const type = event.target.parentElement.parentElement.children[7].value\r\n        const hash = event.target.parentElement.parentElement.children[9].value\r\n        let m = moment().format(\"YYYY.MM.DD\");\r\n        fetch(\"http://localhost:5000/api/createTx/\", {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type':'application/json',\r\n                \"Access-Control-Allow-Origin\":\"*\",\r\n                'Access-Control-Allow-Headers':\"*\"    \r\n            },\r\n            body:JSON.stringify({\r\n                from : from, \r\n                to : to,\r\n                point : point,\r\n                type : type,\r\n                date : m,\r\n                hash : hash,\r\n            })\r\n          }).then(res => {\r\n              if (res.ok){\r\n                console.log(\"Successfully added Transaction\");\r\n              }\r\n          }\r\n          )\r\n    };\r\n\r\n    const handleCreateUserInfo = (event) => {\r\n        /*console.log(event.target.parentElement.children[1].value);\r\n        console.log(event.target.parentElement.children[3].value);\r\n        console.log(event.target.parentElement.children[5].value);*/\r\n        const id = event.target.parentElement.children[1].value\r\n        const password = event.target.parentElement.children[3].value\r\n        const email = event.target.parentElement.children[5].value\r\n        fetch(\"http://localhost:5000/api/createUser/\", {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type':'application/json',\r\n                \"Access-Control-Allow-Origin\":\"*\",\r\n                'Access-Control-Allow-Headers':\"*\"    \r\n            },\r\n            body: JSON.stringify({\r\n              id: id,\r\n              password: password,\r\n              email: email,\r\n            })\r\n          }).then(res => {\r\n              if (res.ok){\r\n                console.log(\"Successfully added user\");\r\n              }\r\n          }\r\n          )            \r\n    };\r\n\r\n    const handleDemo = () => {\r\n        let hash;\r\n        let m = moment().format(\"YYYY.MM.DD\");\r\n        const message = JSON.stringify({\r\n            from: account,\r\n            to: \"0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB\",\r\n            point: 100,\r\n            type: \"A\",\r\n            date: m,\r\n        });\r\n\r\n        signer.signMessage(message).then((result) => (hash = result));\r\n        // 밑의 주석 이용하면 demo send 가능 \r\n        // const send_message = JSON.stringify({\r\n        //     from: account,\r\n        //     to: \"0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB\",\r\n        //     type: \"A\",\r\n        //     value: 100,\r\n        // });\r\n        // signer.signMessage(send_message).then((result) => (hash = result));\r\n        // // 위의 hash 이용해서 Create transaction 보내면 됨\r\n        // fetch(\"http://localhost:5000/api/createTx/\", {\r\n        //     method:'POST',\r\n        //     header:{\r\n        //         'Content-Type':'application/json',\r\n        //         \"Access-Control-Allow-Origin\":\"*\",\r\n        //         'Access-Control-Allow-Headers':\"*\"                \r\n        //     },\r\n        //     body:JSON.send_message\r\n            \r\n        // }).then(() => {\r\n        //     console.log(\"added\");\r\n        // }\r\n        // )\r\n    };\r\n\r\n    \r\n\r\n\r\n    return (\r\n        <Flex m={10} flexDirection=\"column\" w=\"full\">\r\n            <Text fontSize=\"3xl\" fontWeight=\"700\">\r\n                관리자 페이지\r\n            </Text>\r\n\r\n            <VStack\r\n                w=\"full\"\r\n                backgroundColor=\"white\"\r\n                borderRadius=\"5px\"\r\n                p={5}\r\n                marginTop={5}\r\n                borderRadius={20}\r\n            >\r\n                <HStack justifyContent=\"space-between\" w=\"full\">\r\n                    <Text color=\"#4318FF\" fontWeight={700} fontSize=\"lg\">\r\n                        트랜잭션 생성\r\n                    </Text>\r\n                </HStack>\r\n                <FormControl id=\"transaction-create\">\r\n                    <FormLabel>From</FormLabel>\r\n                    <Input placeholder=\"ex) Alice\" />\r\n                    <FormLabel>To</FormLabel>\r\n                    <Input placeholder=\"ex) Bob\" />\r\n                    <FormLabel>Point</FormLabel>\r\n                    <Input placeholder=\"ex) 300\" />\r\n                    <FormLabel>Type</FormLabel>\r\n                    <Input placeholder=\"ex) A\" />\r\n                    <FormLabel>Hash</FormLabel>\r\n                    <Input placeholder=\"Hash Value\" />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        onClick={handleCreateTransaction}\r\n                        h=\"40px\"\r\n                        borderRadius={20}\r\n                        w=\"200px\"\r\n                        bg=\"#4318FF\"\r\n                        color=\"white\"\r\n                        fontSize=\"sm\"\r\n                        fontWeight=\"bold\"\r\n                        mt={5}\r\n                    >\r\n                        <Text>트랜잭션 생성하기</Text>\r\n                    </Button>\r\n                </FormControl>\r\n            </VStack>\r\n            <VStack\r\n                w=\"full\"\r\n                backgroundColor=\"white\"\r\n                borderRadius=\"5px\"\r\n                p={5}\r\n                marginTop={5}\r\n                borderRadius={20}\r\n            >\r\n                <HStack justifyContent=\"space-between\" w=\"full\">\r\n                    <Text color=\"#4318FF\" fontWeight={700} fontSize=\"lg\">\r\n                        유저 정보 생성\r\n                    </Text>\r\n                </HStack>\r\n                <FormControl id=\"transaction-create\">\r\n                    <FormLabel>User ID</FormLabel>\r\n                    <Input placeholder=\"Enter user ID\" />\r\n                    <FormLabel>User Pw</FormLabel>\r\n                    <Input placeholder=\"Enter user Password\" />\r\n                    <FormLabel>User Email</FormLabel>\r\n                    <Input placeholder=\"Enter user Email\" />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        onClick={handleCreateUserInfo}\r\n                        h=\"40px\"\r\n                        borderRadius={20}\r\n                        w=\"200px\"\r\n                        bg=\"#4318FF\"\r\n                        color=\"white\"\r\n                        fontSize=\"sm\"\r\n                        fontWeight=\"bold\"\r\n                        mt={5}\r\n                    >\r\n                        <Text>유저 정보 생성하기</Text>\r\n                    </Button>\r\n                </FormControl>\r\n            </VStack>\r\n            <VStack\r\n                w=\"full\"\r\n                backgroundColor=\"white\"\r\n                borderRadius=\"5px\"\r\n                p={5}\r\n                marginTop={5}\r\n                borderRadius={20}\r\n                align=\"flex-start\"\r\n            >\r\n                <HStack justifyContent=\"space-between\" w=\"full\">\r\n                    <Text color=\"#4318FF\" fontWeight={700} fontSize=\"lg\">\r\n                        Demo\r\n                    </Text>\r\n                </HStack>\r\n                <Text fontSize=\"lg\">A에게 100포인트 보내기</Text>\r\n                <WalletConnect />\r\n                <Button\r\n                    type=\"submit\"\r\n                    onClick={handleDemo}\r\n                    h=\"40px\"\r\n                    borderRadius={20}\r\n                    w=\"200px\"\r\n                    bg=\"#4318FF\"\r\n                    color=\"white\"\r\n                    fontSize=\"sm\"\r\n                    fontWeight=\"bold\"\r\n                    mt={5}\r\n                >\r\n                    <Text>Demo 실행</Text>\r\n                </Button>\r\n            </VStack>\r\n        </Flex>\r\n    );\r\n}\r\n\r\nexport default AdminPage;","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\pages\\AllTransactions.js",["115","116","117","118"],"import { Flex, HStack, Text, VStack, Box } from \"@chakra-ui/layout\";\r\nimport LatestBlock from \"../components/LatestBlocks\";\r\nimport LatestTransactions from \"../components/LatestTransactions\";\r\nimport {useEffect, useState} from 'react';\r\n\r\n\r\n\r\n\r\nfunction AllTransactions() {\r\n    \r\n    return (\r\n        <Flex m={10} flexDirection=\"column\" w=\"full\">\r\n            <Text fontSize=\"3xl\" fontWeight=\"700\">\r\n                전체 거래내역\r\n            </Text>\r\n\r\n            {/* 그래프 */}\r\n\r\n            <VStack\r\n                w=\"full\"\r\n                backgroundColor=\"white\"\r\n                borderRadius=\"5px\"\r\n                p={5}\r\n                marginTop={5}\r\n                borderRadius={20}\r\n            >\r\n                <HStack justifyContent=\"space-between\" w=\"full\">\r\n                    <Text color=\"#4318FF\" fontWeight={700} fontSize=\"lg\">\r\n                        Latest Blocks\r\n                    </Text>\r\n                    <Box\r\n                        as=\"button\"\r\n                        backgroundColor=\"#4318FF\"\r\n                        color=\"white\"\r\n                        borderRadius=\"3px\"\r\n                        width=\"60px\"\r\n                        fontWeight=\"bold\"\r\n                    >\r\n                        + More\r\n                    </Box>\r\n                </HStack>\r\n\r\n                <LatestBlock />\r\n            </VStack>\r\n\r\n            <VStack\r\n                w=\"full\"\r\n                backgroundColor=\"white\"\r\n                borderRadius=\"5px\"\r\n                p={5}\r\n                marginTop={5}\r\n                borderRadius={20}\r\n            >\r\n                <HStack justifyContent=\"space-between\" w=\"full\">\r\n                    <Text color=\"#4318FF\" fontWeight={700} fontSize=\"lg\">\r\n                        Latest Transaction\r\n                    </Text>\r\n                    <Box\r\n                        as=\"button\"\r\n                        backgroundColor=\"#4318FF\"\r\n                        color=\"white\"\r\n                        borderRadius=\"3px\"\r\n                        width=\"60px\"\r\n                        fontWeight=\"bold\"\r\n                    >\r\n                        + More\r\n                    </Box>\r\n                </HStack>\r\n\r\n                <LatestTransactions \r\n                />\r\n            </VStack>\r\n\r\n            {/* 거래내역 */}\r\n        </Flex>\r\n    );\r\n}\r\n\r\nexport default AllTransactions;\r\n","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\pages\\MyTransactions.js",["119","120"],"import { Flex, HStack, Text, VStack, Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport MyTransactionsAll from \"../components/MyTransactionsAll\";\r\nimport MyTransactionsSend from \"../components/MyTransactionsSend\";\r\nimport MyTransactionsReceive from \"../components/MyTransactionsReceive\";\r\nimport TransactionsChart from \"../components/TransactionsChart\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\n\r\nfunction MySelect({ select }) {\r\n    if (select === 2) {\r\n        return <MyTransactionsReceive/>;\r\n    } else if (select === 1) {\r\n        return <MyTransactionsSend/>;\r\n    } else {\r\n        return <MyTransactionsAll/>;\r\n    }\r\n}\r\n\r\nfunction MyTransactions() {\r\n\r\n    const [index, setIndex] = useState(0);\r\n    \r\n\r\n    return (\r\n        <Flex m={10} flexDirection=\"column\" w=\"full\">\r\n            <Text fontSize=\"3xl\" fontWeight=\"700\">\r\n                My 거래내역\r\n            </Text>\r\n            <VStack\r\n                w=\"full\"\r\n                backgroundColor=\"white\"\r\n                borderRadius=\"5px\"\r\n                p={5}\r\n                marginBottom={5}\r\n                marginTop={5}\r\n                borderRadius={20}\r\n            >\r\n                <TransactionsChart />\r\n            </VStack>\r\n            <HStack>\r\n                <Box\r\n                    as=\"button\"\r\n                    backgroundColor={index === 0 ? \"#4318FF\" : \"white\"}\r\n                    color={index === 0 ? \"white\" : \"black\"}\r\n                    borderRadius=\"3px\"\r\n                    width=\"60px\"\r\n                    fontWeight=\"bold\"\r\n                    onClick={() => {\r\n                        setIndex(0);\r\n                    }}\r\n                >\r\n                    ALL\r\n                </Box>\r\n                <Box\r\n                    as=\"button\"\r\n                    backgroundColor={index === 1 ? \"#4318FF\" : \"white\"}\r\n                    color={index === 1 ? \"white\" : \"black\"}\r\n                    borderRadius=\"3px\"\r\n                    width=\"60px\"\r\n                    fontWeight=\"bold\"\r\n                    onClick={() => {\r\n                        setIndex(1);\r\n                    }}\r\n                >\r\n                    보낸 내역\r\n                </Box>\r\n                <Box\r\n                    as=\"button\"\r\n                    backgroundColor={index === 2 ? \"#4318FF\" : \"white\"}\r\n                    color={index === 2 ? \"white\" : \"black\"}\r\n                    borderRadius=\"3px\"\r\n                    width=\"60px\"\r\n                    fontWeight=\"bold\"\r\n                    onClick={() => {\r\n                        setIndex(2);\r\n                    }}\r\n                >\r\n                    받은 내역\r\n                </Box>\r\n            </HStack>\r\n\r\n            <VStack\r\n                w=\"full\"\r\n                backgroundColor=\"white\"\r\n                borderRadius={20}\r\n                p={5}\r\n                marginTop={5}\r\n            >\r\n                <MySelect select={index}/>\r\n            </VStack>\r\n        </Flex>\r\n    );\r\n}\r\n\r\nexport default MyTransactions;\r\n","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\components\\LatestBlocks.js",[],"D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\components\\WalletConnect.js",[],"D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\components\\PointStatus.js",["121"],"import { VStack, HStack, Text, useMediaQuery } from \"@chakra-ui/react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\n\r\nconst getRequest=(jsons)=>{\r\n    return{\r\n        method:'POST',\r\n        header:{\r\n            'Content-Type':'application/json',\r\n            \"Access-Control-Allow-Origin\":\"*\",\r\n            'Access-Control-Allow-Headers':\"*\"                \r\n        },\r\n        body:JSON.stringify(jsons)\r\n    }\r\n}\r\n\r\nfunction PointStatus() {\r\n    const [pointArr, setPointArr] = useState([]);\r\n    const {account} = useWeb3React();\r\n\r\n    useEffect(() => {\r\n        //username를 생성하는 부분이 완성되면, 아래 fortest을 지우고 현재 로그인된 사용자의 username을 넣으면 됩니다. (성민)\r\n        let requestOpt = getRequest({\"username\":account});\r\n        fetch(\"http://localhost:5000/api/userInfo\", requestOpt)\r\n            .then((response) => response.json())\r\n            .then((jsons) => {\r\n                setPointArr(pointArr.concat(jsons.pointA,jsons.pointB,jsons.pointC,jsons.pointD));\r\n            });\r\n    }, [])\r\n\r\n    const [isLessThan1195] = useMediaQuery(\"(max-width:1195px)\");\r\n    return (\r\n        <VStack\r\n            borderRadius={15}\r\n            bg=\"white\"\r\n            p={10}\r\n            align=\"flex-start\"\r\n            h=\"355px\"\r\n            w={isLessThan1195 ? \"full\" : \"45%\"}\r\n            m={3}\r\n        >\r\n            <Text fontSize=\"3xl\" fontWeight=\"700\">\r\n                포인트 현황\r\n            </Text>\r\n            <VStack spacing={10} w=\"full\">\r\n                <HStack w=\"full\" justify=\"space-between\">\r\n                    <Text fontSize=\"lg\">Service A</Text>\r\n                    <Text fontSize=\"lg\">{pointArr[0]}</Text>\r\n                </HStack>\r\n                <HStack w=\"full\" justify=\"space-between\">\r\n                    <Text fontSize=\"lg\">Service B</Text>\r\n                    <Text fontSize=\"lg\">{pointArr[1]}</Text>\r\n                </HStack>\r\n                <HStack w=\"full\" justify=\"space-between\">\r\n                    <Text fontSize=\"lg\">Service C</Text>\r\n                    <Text fontSize=\"lg\">{pointArr[2]}</Text>\r\n                </HStack>\r\n                <HStack w=\"full\" justify=\"space-between\">\r\n                    <Text fontSize=\"lg\">Service D</Text>\r\n                    <Text fontSize=\"lg\">{pointArr[3]}</Text>\r\n                </HStack>\r\n            </VStack>\r\n        </VStack>\r\n    );\r\n}\r\n\r\nexport default PointStatus;\r\n","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\components\\TotalPoint.js",["122"],"import { Text, HStack, Box, VStack } from \"@chakra-ui/react\";\r\nimport {useState, useEffect} from \"react\"\r\nimport { useWeb3React } from \"@web3-react/core\";\r\n\r\n\r\nconst getRequest = (jsons) => {\r\n    return {\r\n        method: \"POST\",\r\n        header: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Access-Control-Allow-Origin\": \"*\",\r\n            \"Access-Control-Allow-Headers\": \"*\",\r\n        },\r\n        body: JSON.stringify(jsons),\r\n    };\r\n};\r\n\r\nfunction TotalPoint() {\r\n    const [pointArr, setPointArr] = useState([]);\r\n    const {account} = useWeb3React();\r\n\r\n    useEffect(() => {\r\n        //username를 생성하는 부분이 완성되면, 아래 fortest을 지우고 현재 로그인된 사용자의 username을 넣으면 됩니다. (성민)\r\n        let requestOpt = getRequest({\"username\":account});\r\n        fetch(\"http://localhost:5000/api/userInfo\", requestOpt)\r\n            .then((response) => response.json())\r\n            .then((jsons) => {\r\n                setPointArr(pointArr.concat(jsons.pointA,jsons.pointB,jsons.pointC,jsons.pointD));\r\n            });\r\n    }, [])\r\n\r\n    const sumTotalPoint = () => {\r\n        let sumPoint = 0\r\n        for (let i = 0; i < pointArr.length; i++) {\r\n            sumPoint += pointArr[i]\r\n        }\r\n        return sumPoint\r\n    }\r\n\r\n    const sumPoint = sumTotalPoint()\r\n\r\n    return (\r\n        <VStack\r\n            justify=\"space-between\"\r\n            p={5}\r\n            m={3}\r\n            backgroundImage=\"linear-gradient(#532DFB,#868CFF)\"\r\n            w=\"full\"\r\n            h=\"204px\"\r\n            borderRadius={15}\r\n        >\r\n            <HStack w=\"full\" justify=\"space-between\">\r\n                <Text color=\"white\" fontWeight=\"700\" fontSize=\"3xl\">\r\n                    총 보유 포인트\r\n                </Text>\r\n                <Box />\r\n            </HStack>\r\n            <HStack w=\"full\" justify=\"space-between\">\r\n                <Box />\r\n                <Text color=\"white\" fontWeight=\"700\" fontSize=\"5xl\">\r\n                    {sumPoint} point\r\n                </Text>\r\n            </HStack>\r\n        </VStack>\r\n    );\r\n}\r\n\r\nexport default TotalPoint;\r\n","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\components\\AccountInfo.js",["123"],"import {\r\n    VStack,\r\n    Box,\r\n    Flex,\r\n    Text,\r\n    Button,\r\n    Link,\r\n    useMediaQuery,\r\n    Tooltip,\r\n} from \"@chakra-ui/react\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\n\r\nfunction AccountInfo() {\r\n    const [isLessThan1195] = useMediaQuery(\"(max-width:1195px)\");\r\n    const { account } = useWeb3React();\r\n    const parseAccount =\r\n        account &&\r\n        account?.substring(0, 10) + \"...\" + account?.substring(32, 40);\r\n\r\n    const etherscanAccount = \"https://etherscan.io/address/\" + account;\r\n\r\n    const parseAccountForColor = \"#\" + account?.substring(2, 8);\r\n    console.log(parseAccountForColor);\r\n    return (\r\n        <VStack\r\n            borderRadius={15}\r\n            bg=\"white\"\r\n            p={10}\r\n            h=\"355px\"\r\n            w={isLessThan1195 ? \"full\" : \"45%\"}\r\n            m={3}\r\n            justify=\"center\"\r\n            spacing={5}\r\n        >\r\n            <Flex\r\n                backgroundColor={parseAccountForColor}\r\n                borderRadius={100}\r\n                w=\"110px\"\r\n                h=\"110px\"\r\n                align=\"center\"\r\n                justify=\"center\"\r\n                fontFamily=\"'Pacifico', cursive\"\r\n                fontSize=\"3xl\"\r\n            >\r\n                {account?.substring(2, 6)}\r\n            </Flex>\r\n            <Text fontSize=\"lg\">내 지갑 주소 : </Text>\r\n            <Tooltip label={account}>\r\n                <Text>{parseAccount}</Text>\r\n            </Tooltip>\r\n            {account && (\r\n                <Button as={Link} isExternal href={etherscanAccount}>\r\n                    View on Etherscan\r\n                </Button>\r\n            )}\r\n        </VStack>\r\n    );\r\n}\r\n\r\nexport default AccountInfo;\r\n","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\components\\PointPieChart.js",["124","125"],"import { VStack, HStack, Text, useMediaQuery } from \"@chakra-ui/react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { ResponsiveContainer, PieChart, Pie } from \"recharts\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\n\r\nconst getRequest = (jsons) => {\r\n    return {\r\n        method: \"POST\",\r\n        header: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Access-Control-Allow-Origin\": \"*\",\r\n            \"Access-Control-Allow-Headers\": \"*\",\r\n        },\r\n        body: JSON.stringify(jsons),\r\n    };\r\n};\r\n\r\nfunction PointPieChart() {\r\n    const [pointArr, setPointArr] = useState([]);\r\n    const {account} = useWeb3React();\r\n\r\n    useEffect(() => {\r\n        //username를 생성하는 부분이 완성되면, 아래 fortest을 지우고 현재 로그인된 사용자의 username을 넣으면 됩니다. (성민)\r\n        let requestOpt = getRequest({\"username\":account});\r\n        fetch(\"http://localhost:5000/api/userInfo\", requestOpt)\r\n            .then((response) => response.json())\r\n            .then((jsons) => {\r\n                setPointArr(pointArr.concat(jsons.pointA,jsons.pointB,jsons.pointC,jsons.pointD));\r\n            });\r\n    }, [])\r\n\r\n    const data = [\r\n        {\r\n            name: \"Group A\",\r\n            value: pointArr[0],\r\n        },\r\n        {\r\n            name: \"Group B\",\r\n            value: pointArr[1],\r\n        },\r\n        {\r\n            name: \"Group C\",\r\n            value: pointArr[2],\r\n        },\r\n        {\r\n            name: \"Group D\",\r\n            value: pointArr[3],\r\n        },\r\n    ];\r\n\r\n    const [isLessThan1195] = useMediaQuery(\"(max-width:1195px)\");\r\n    return (\r\n        <VStack\r\n            borderRadius={15}\r\n            bg=\"white\"\r\n            p={10}\r\n            align=\"flex-start\"\r\n            h=\"355px\"\r\n            w={isLessThan1195 ? \"full\" : \"45%\"}\r\n            m={3}\r\n        >\r\n            <Text fontSize=\"3xl\" fontWeight=\"700\">\r\n                포인트 비율\r\n            </Text>\r\n            <ResponsiveContainer width=\"95%\" height={180} debounce={1}>\r\n                <PieChart width={730} height={250}>\r\n                    <Pie\r\n                        data={data}\r\n                        dataKey=\"value\"\r\n                        nameKey=\"name\"\r\n                        cx=\"50%\"\r\n                        cy=\"50%\"\r\n                        innerRadius={60}\r\n                        outerRadius={80}\r\n                        fill=\"#82ca9d\"\r\n                    />\r\n                </PieChart>\r\n            </ResponsiveContainer>\r\n        </VStack>\r\n    );\r\n}\r\n\r\nexport default PointPieChart;\r\n","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\components\\MyTransactionsAll.js",["126","127","128","129"],"import styled from \"styled-components\";\r\nimport kakaoTalk from \"../assets/kakaoTalk.png\";\r\nimport { HStack, Text } from \"@chakra-ui/layout\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport axios from 'axios';\r\n\r\nconst Table = styled.table`\r\n  width: 100%;\r\n`;\r\n\r\nconst Td = styled.td`\r\n  text-align: center;\r\n  padding: 5px;\r\n`;\r\n\r\nconst Th = styled.th`\r\n  font-weight: 800;\r\n  color: #4318ff;\r\n  text-align: center;\r\n  border-bottom: 2px solid #4318ff;\r\n`;\r\n\r\nconst Icon = styled.img`\r\n  src: ${(props) => props.src};\r\n  width: 20px;\r\n  margin-left: 10px;\r\n`;\r\n\r\nconst Time = styled.td`\r\n  color: #aeb4c4;\r\n  text-align: center;\r\n`;\r\n\r\n\r\nexport default function MyTransactionsAll() {\r\n  const [fromListState, setFromListState] = useState([\"Not Found\"]);\r\n  const [toListState, setToListState] = useState([\"Not Found\"]);\r\n  const [typeListState, setTypeListState] = useState([\"Not Found\"]);\r\n  const [valueListState, setValueListState] = useState([\"Not Found\"]);\r\n  const [dateListState, setDateListState] = useState([\"Not Found\"]);\r\n  const [hashListState, setHashListState] = useState([\"Not Found\"]);\r\n\r\n  const {account} = useWeb3React();\r\n\r\n  useEffect(() => {\r\n    const fromList = [];\r\n    const toList = [];\r\n    const typeList = [];\r\n    const valueList = [];\r\n    const dateList = [];\r\n    const hashList = [];\r\n    axios.post(\"http://localhost:5000/api/viewAll\").then(function(response){\r\n          console.log(response.data);\r\n          for(let i = 1; i <= Object.keys(response.data).length; i++) {\r\n            if(response.data[i].from == account || response.data[i].to == account) {\r\n              fromList.push(response.data[i].from);\r\n              toList.push(response.data[i].to);\r\n              typeList.push(response.data[i].type);\r\n              valueList.push(response.data[i].value);\r\n              dateList.push(response.data[i].create_date);\r\n              hashList.push(response.data[i].hash);\r\n            }\r\n          }\r\n          setFromListState(fromList);\r\n          setToListState(toList);\r\n          setTypeListState(typeList);\r\n          setValueListState(valueList);\r\n          setDateListState(dateList);\r\n          setHashListState(hashList);\r\n        });\r\n    }, [])\r\n\r\n  const createTransactionTable = () => {\r\n    const displayedTable = [];\r\n    for(let i = 0; i < valueListState.length; i++) {\r\n      displayedTable.push(\r\n        <tr>\r\n          <Td>\r\n            <HStack justifyContent=\"center\">\r\n              <Icon src={kakaoTalk} />\r\n              <Text>kakaoPay</Text>\r\n            </HStack>\r\n          </Td>\r\n          <Time>{dateListState[i]}</Time>\r\n          <Td>{fromListState[i]}</Td>\r\n          <Td>{toListState[i]}</Td>\r\n          <Td>{valueListState[i]}</Td>\r\n          <Td>{hashListState[i]}</Td>\r\n        </tr>\r\n      )\r\n    }\r\n    return(\r\n      <Table>\r\n      <thead>\r\n        <tr>\r\n          <Th>플랫폼</Th>\r\n          <Th>시간</Th>\r\n          <Th>FROM</Th>\r\n          <Th>TO</Th>\r\n          <Th>금액</Th>\r\n          <Th>HASH</Th>\r\n        </tr>\r\n      </thead>\r\n\r\n      <tbody>\r\n        {displayedTable}\r\n      </tbody>\r\n    </Table>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {createTransactionTable()}\r\n    </>\r\n  );\r\n}\r\n","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\components\\LatestTransactions.js",["130","131"],"import { HStack, Text } from \"@chakra-ui/layout\";\r\nimport styled from \"styled-components\";\r\nimport kakaoTalk from \"../assets/kakaoTalk.png\";\r\nimport {useEffect, useState} from \"react\";\r\n\r\nconst Table = styled.table`\r\n  width: 100%;\r\n`;\r\n\r\nconst Td = styled.td`\r\n  text-align: center;\r\n  padding: 5px;\r\n`;\r\n\r\nconst Th = styled.th`\r\n  font-weight: 800;\r\n  color: #4318ff;\r\n  text-align: center;\r\n  border-bottom: 2px solid #4318ff;\r\n`;\r\n\r\nconst Icon = styled.img`\r\n  src: ${(props) => props.src};\r\n  width: 20px;\r\n  alt: \"kakao\";\r\n`;\r\n\r\nconst Time = styled.td`\r\n  color: #aeb4c4;\r\n  text-align: center;\r\n`;\r\n\r\nconst getRequest=(jsons)=>{\r\n  return{\r\n      method:'POST',\r\n      header:{\r\n          'Content-Type':'application/json',\r\n          \"Access-Control-Allow-Origin\":\"*\",\r\n          'Access-Control-Allow-Headers':\"*\"                \r\n      },\r\n      body:JSON.stringify(jsons)\r\n  }\r\n}\r\n\r\nexport default function LatestTransactions() {\r\n  const [tran, setTran] = useState();\r\n  // setTran(props.tran);\r\n    const [fromList, setFromListState] = useState([\"Not Found\"]);\r\n    const [toList, setToListState] = useState([\"Not Found\"]);\r\n    const [typeList, setTypeListState] = useState([\"Not Found\"]);\r\n    const [valueList, setValueListState] = useState([\"Not Found\"]);\r\n    const [dateList, setDateListState] = useState([\"Not Found\"]);\r\n    const [hashList, setHashListState] = useState([\"Not Found\"]);\r\n\r\n    useEffect(() => {\r\n        const fromList = [];\r\n        const toList = [];\r\n        const typeList = [];\r\n        const valueList = [];\r\n        const dateList = [];\r\n        const hashList = [];\r\n        const requestOpt = getRequest();\r\n        fetch(\"http://localhost:5000/api/viewAll\", requestOpt)\r\n            .then((response) => response.json())\r\n            .then((jsons) => {\r\n            console.log(jsons);\r\n            for(let i = 1; i <= Object.keys(jsons).length; i++) {\r\n            \r\n            fromList.push(jsons[i].from);\r\n            toList.push(jsons[i].to);\r\n            typeList.push(jsons[i].type);\r\n            valueList.push(jsons[i].value);\r\n            dateList.push(jsons[i].create_date);\r\n            hashList.push(jsons[i].hash);\r\n            \r\n            }\r\n            setFromListState(fromList);\r\n            setToListState(toList);\r\n            setTypeListState(typeList);\r\n            setValueListState(valueList);\r\n            setDateListState(dateList);\r\n            setHashListState(hashList);\r\n        });\r\n    }, [])\r\n\r\n  \r\n  const view = ()=>{\r\n    const result = [];\r\n    const realResult=[];\r\n    \r\n    realResult.push(\r\n    <thead>\r\n      <tr>\r\n        <Th>플랫폼</Th>\r\n        <Th>시간</Th>\r\n        <Th>FROM</Th>\r\n        <Th>TO</Th>\r\n        <Th>금액</Th>\r\n        <Th>HASH</Th>\r\n      </tr>\r\n    </thead>\r\n    );\r\n    console.log(typeof dateList)\r\n    if(typeof dateList === \"object\"){\r\n      for(let i=0;i<dateList.length;i++){\r\n        // console.log('asd');\r\n        result.push(\r\n          <tr>\r\n            <Td>\r\n              <HStack justifyContent=\"center\">\r\n                <Icon src={kakaoTalk} />\r\n                <Text>{typeList[i]}</Text>\r\n              </HStack>\r\n            </Td>\r\n            <Time>{dateList[i]}</Time>\r\n            <Td>{fromList[i]}...</Td>\r\n            <Td>{toList[i]}...</Td>\r\n            <Td>{valueList[i]}</Td>\r\n            <Td>{hashList[i]}</Td>\r\n          </tr>\r\n        )\r\n      }\r\n      console.log(result);\r\n    }\r\n    realResult.push(<tbody>{result}</tbody>);\r\n\r\n    return <Table>{realResult}</Table>\r\n  }\r\n  return (\r\n    <>\r\n      {view()}\r\n    </>\r\n  );\r\n}\r\n","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\components\\MyTransactionsSend.js",["132","133","134","135","136","137"],"import styled from \"styled-components\";\r\nimport kakaoTalk from \"../assets/kakaoTalk.png\";\r\nimport { HStack, Text } from \"@chakra-ui/layout\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport axios from 'axios';\r\n\r\nconst Table = styled.table`\r\n  width: 100%;\r\n`;\r\n\r\nconst Td = styled.td`\r\n  text-align: center;\r\n  padding: 5px;\r\n`;\r\n\r\nconst Th = styled.th`\r\n  font-weight: 800;\r\n  color: #4318ff;\r\n  text-align: center;\r\n  border-bottom: 2px solid #4318ff;\r\n`;\r\n\r\nconst Icon = styled.img`\r\n  src: ${(props) => props.src};\r\n  width: 20px;\r\n  margin-left: 10px;\r\n`;\r\n\r\nconst Time = styled.td`\r\n  color: #aeb4c4;\r\n  text-align: center;\r\n`;\r\n\r\n\r\nexport default function MyTransactionsAll() {\r\n  const [fromListState, setFromListState] = useState([\"Not Found\"]);\r\n  const [toListState, setToListState] = useState([\"Not Found\"]);\r\n  const [typeListState, setTypeListState] = useState([\"Not Found\"]);\r\n  const [valueListState, setValueListState] = useState([\"Not Found\"]);\r\n  const [dateListState, setDateListState] = useState([\"Not Found\"]);\r\n  const [hashListState, setHashListState] = useState([\"Not Found\"]);\r\n  \r\n  const {account} = useWeb3React();\r\n\r\n  useEffect(() => {\r\n    const fromList = [];\r\n    const toList = [];\r\n    const typeList = [];\r\n    const valueList = [];\r\n    const dateList = [];\r\n    const hashList = [];\r\n    axios.post(\"http://localhost:5000/api/viewAll\").then(function(response){\r\n          console.log(response.data);\r\n          for(let i = 1; i <= Object.keys(response.data).length; i++) {\r\n            if(response.data[i].from == account) {\r\n              toList.push(response.data[i].to);\r\n              typeList.push(response.data[i].type);\r\n              valueList.push(response.data[i].value);\r\n              dateList.push(response.data[i].create_date);\r\n              hashList.push(response.data[i].hash);\r\n            }\r\n          }\r\n          setToListState(toList);\r\n          setTypeListState(typeList);\r\n          setValueListState(valueList);\r\n          setDateListState(dateList);\r\n          setHashListState(hashList);\r\n        });\r\n    }, [])\r\n\r\n  const createTransactionTable = () => {\r\n    const displayedTable = [];\r\n    for(let i = 0; i < valueListState.length; i++) {\r\n      displayedTable.push(\r\n        <tr>\r\n          <Td>\r\n            <HStack justifyContent=\"center\">\r\n              <Icon src={kakaoTalk} />\r\n              <Text>kakaoPay</Text>\r\n            </HStack>\r\n          </Td>\r\n          <Time>{dateListState[i]}</Time>\r\n          <Td>{toListState[i]}</Td>\r\n          <Td>{valueListState[i]}</Td>\r\n          <Td>{hashListState[i]}</Td>\r\n        </tr>\r\n      )\r\n    }\r\n    return(\r\n      <Table>\r\n      <thead>\r\n        <tr>\r\n          <Th>플랫폼</Th>\r\n          <Th>시간</Th>\r\n          <Th>TO</Th>\r\n          <Th>금액</Th>\r\n          <Th>HASH</Th>\r\n        </tr>\r\n      </thead>\r\n\r\n      <tbody>\r\n        {displayedTable}\r\n      </tbody>\r\n    </Table>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {createTransactionTable()}\r\n    </>\r\n  );\r\n}\r\n","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\components\\TransactionsChart.js",["138","139","140"],"import { useState } from \"react\";\r\nimport {\r\n    LineChart,\r\n    Line,\r\n    Tooltip,\r\n    YAxis,\r\n    XAxis,\r\n    CartesianGrid,\r\n    ResponsiveContainer,\r\n} from \"recharts\";\r\nimport data from \"../assets/data.json\";\r\n\r\nexport default function TransactionsChart() {\r\n    return (\r\n        <ResponsiveContainer width=\"95%\" height={180} debounce={1}>\r\n            <LineChart\r\n                data={data}\r\n                margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\r\n            >\r\n                <YAxis />\r\n                <Tooltip\r\n                    itemStyle={{ fontSize: \"5px\" }}\r\n                    contentStyle={{ fontSize: \"0px\" }}\r\n                    wrapperStyle={{ padding: 0, border: \"none\" }}\r\n                />\r\n                <Line\r\n                    dot={false}\r\n                    type=\"monotone\"\r\n                    dataKey=\"pv\"\r\n                    stroke=\"#4318ff\"\r\n                />\r\n            </LineChart>\r\n        </ResponsiveContainer>\r\n    );\r\n}\r\n","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\components\\MyTransactionsReceive.js",["141","142","143","144","145","146"],"import styled from \"styled-components\";\r\nimport kakaoTalk from \"../assets/kakaoTalk.png\";\r\nimport { HStack, Text } from \"@chakra-ui/layout\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport axios from 'axios';\r\n\r\nconst Table = styled.table`\r\n  width: 100%;\r\n`;\r\n\r\nconst Td = styled.td`\r\n  text-align: center;\r\n  padding: 5px;\r\n`;\r\n\r\nconst Th = styled.th`\r\n  font-weight: 800;\r\n  color: #4318ff;\r\n  text-align: center;\r\n  border-bottom: 2px solid #4318ff;\r\n`;\r\n\r\nconst Icon = styled.img`\r\n  src: ${(props) => props.src};\r\n  width: 20px;\r\n  margin-left: 10px;\r\n`;\r\n\r\nconst Time = styled.td`\r\n  color: #aeb4c4;\r\n  text-align: center;\r\n`;\r\n\r\n\r\nexport default function MyTransactionsAll() {\r\n  const [fromListState, setFromListState] = useState([\"Not Found\"]);\r\n  const [toListState, setToListState] = useState([\"Not Found\"]);\r\n  const [typeListState, setTypeListState] = useState([\"Not Found\"]);\r\n  const [valueListState, setValueListState] = useState([\"Not Found\"]);\r\n  const [dateListState, setDateListState] = useState([\"Not Found\"]);\r\n  const [hashListState, setHashListState] = useState([\"Not Found\"]);\r\n\r\n  const {account} = useWeb3React();\r\n\r\n  useEffect(() =>{\r\n    const fromList = [];\r\n    const toList = [];\r\n    const typeList = [];\r\n    const valueList = [];\r\n    const dateList = [];\r\n    const hashList = [];\r\n    axios.post(\"http://localhost:5000/api/viewAll\").then(function(response){\r\n      for (let i = 1; i <= Object.keys(response.data).length; i++) {\r\n        if (response.data[i].to == account) {\r\n          console.log(response.data);\r\n          fromList.push(response.data[i].from);\r\n          typeList.push(response.data[i].type);\r\n          valueList.push(response.data[i].value);\r\n          dateList.push(response.data[i].create_date);\r\n          hashList.push(response.data[i].hash);\r\n        }\r\n      }\r\n      setFromListState(fromList);\r\n      setTypeListState(typeList);\r\n      setValueListState(valueList);\r\n      setDateListState(dateList);\r\n      setHashListState(hashList)\r\n    }) \r\n  },[])\r\n  const createTransactionTable = () => {\r\n    const displayedTable = [];\r\n    for(let i = 0; i < valueListState.length; i++) {\r\n      displayedTable.push(\r\n        <tr>\r\n          <Td>\r\n            <HStack justifyContent=\"center\">\r\n              <Icon src={kakaoTalk} />\r\n              <Text>kakaoPay</Text>\r\n            </HStack>\r\n          </Td>\r\n          <Time>{dateListState[i]}</Time>\r\n          <Td>{fromListState[i]}</Td>\r\n          <Td>{valueListState[i]}</Td>\r\n          <Td>{hashListState[i]}</Td>\r\n        </tr>\r\n      )\r\n    }\r\n    return(\r\n      <Table>\r\n      <thead>\r\n        <tr>\r\n          <Th>플랫폼</Th>\r\n          <Th>시간</Th>\r\n          <Th>FROM</Th>\r\n          <Th>금액</Th>\r\n          <Th>HASH</Th>\r\n        </tr>\r\n      </thead>\r\n\r\n      <tbody>\r\n        {displayedTable}\r\n      </tbody>\r\n    </Table>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {createTransactionTable()}\r\n    </>\r\n  );\r\n}\r\n","D:\\using_file\\kingo\\skkrypto-nft\\pybo\\src\\connector\\index.js",[],{"ruleId":"147","replacedBy":"148"},{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","severity":1,"message":"152","line":2,"column":5,"nodeType":"153","messageId":"154","endLine":2,"endColumn":11},{"ruleId":"151","severity":1,"message":"155","line":3,"column":5,"nodeType":"153","messageId":"154","endLine":3,"endColumn":9},{"ruleId":"151","severity":1,"message":"156","line":4,"column":5,"nodeType":"153","messageId":"154","endLine":4,"endColumn":11},{"ruleId":"151","severity":1,"message":"157","line":6,"column":5,"nodeType":"153","messageId":"154","endLine":6,"endColumn":8},{"ruleId":"151","severity":1,"message":"157","line":6,"column":5,"nodeType":"153","messageId":"154","endLine":6,"endColumn":8},{"ruleId":"151","severity":1,"message":"158","line":11,"column":5,"nodeType":"153","messageId":"154","endLine":11,"endColumn":21},{"ruleId":"151","severity":1,"message":"159","line":12,"column":5,"nodeType":"153","messageId":"154","endLine":12,"endColumn":19},{"ruleId":"151","severity":1,"message":"160","line":22,"column":12,"nodeType":"153","messageId":"154","endLine":22,"endColumn":17},{"ruleId":"151","severity":1,"message":"161","line":22,"column":19,"nodeType":"153","messageId":"154","endLine":22,"endColumn":27},{"ruleId":"151","severity":1,"message":"162","line":82,"column":13,"nodeType":"153","messageId":"154","endLine":82,"endColumn":17},{"ruleId":"163","severity":1,"message":"164","line":132,"column":17,"nodeType":"165","messageId":"166","endLine":132,"endColumn":34},{"ruleId":"163","severity":1,"message":"164","line":172,"column":17,"nodeType":"165","messageId":"166","endLine":172,"endColumn":34},{"ruleId":"163","severity":1,"message":"164","line":208,"column":17,"nodeType":"165","messageId":"166","endLine":208,"endColumn":34},{"ruleId":"151","severity":1,"message":"167","line":4,"column":9,"nodeType":"153","messageId":"154","endLine":4,"endColumn":18},{"ruleId":"151","severity":1,"message":"168","line":4,"column":20,"nodeType":"153","messageId":"154","endLine":4,"endColumn":28},{"ruleId":"163","severity":1,"message":"164","line":25,"column":17,"nodeType":"165","messageId":"166","endLine":25,"endColumn":34},{"ruleId":"163","severity":1,"message":"164","line":52,"column":17,"nodeType":"165","messageId":"166","endLine":52,"endColumn":34},{"ruleId":"151","severity":1,"message":"169","line":7,"column":10,"nodeType":"153","messageId":"154","endLine":7,"endColumn":22},{"ruleId":"163","severity":1,"message":"164","line":36,"column":17,"nodeType":"165","messageId":"166","endLine":36,"endColumn":34},{"ruleId":"170","severity":1,"message":"171","line":29,"column":8,"nodeType":"172","endLine":29,"endColumn":10,"suggestions":"173"},{"ruleId":"170","severity":1,"message":"171","line":30,"column":8,"nodeType":"172","endLine":30,"endColumn":10,"suggestions":"174"},{"ruleId":"151","severity":1,"message":"157","line":3,"column":5,"nodeType":"153","messageId":"154","endLine":3,"endColumn":8},{"ruleId":"151","severity":1,"message":"152","line":1,"column":18,"nodeType":"153","messageId":"154","endLine":1,"endColumn":24},{"ruleId":"170","severity":1,"message":"171","line":30,"column":8,"nodeType":"172","endLine":30,"endColumn":10,"suggestions":"175"},{"ruleId":"151","severity":1,"message":"176","line":39,"column":10,"nodeType":"153","messageId":"154","endLine":39,"endColumn":23},{"ruleId":"177","severity":1,"message":"178","line":56,"column":38,"nodeType":"179","messageId":"180","endLine":56,"endColumn":40},{"ruleId":"177","severity":1,"message":"178","line":56,"column":72,"nodeType":"179","messageId":"180","endLine":56,"endColumn":74},{"ruleId":"170","severity":1,"message":"181","line":72,"column":8,"nodeType":"172","endLine":72,"endColumn":10,"suggestions":"182"},{"ruleId":"151","severity":1,"message":"183","line":46,"column":10,"nodeType":"153","messageId":"154","endLine":46,"endColumn":14},{"ruleId":"151","severity":1,"message":"184","line":46,"column":16,"nodeType":"153","messageId":"154","endLine":46,"endColumn":23},{"ruleId":"151","severity":1,"message":"185","line":37,"column":10,"nodeType":"153","messageId":"154","endLine":37,"endColumn":23},{"ruleId":"151","severity":1,"message":"186","line":37,"column":25,"nodeType":"153","messageId":"154","endLine":37,"endColumn":41},{"ruleId":"151","severity":1,"message":"176","line":39,"column":10,"nodeType":"153","messageId":"154","endLine":39,"endColumn":23},{"ruleId":"151","severity":1,"message":"187","line":47,"column":11,"nodeType":"153","messageId":"154","endLine":47,"endColumn":19},{"ruleId":"177","severity":1,"message":"178","line":56,"column":38,"nodeType":"179","messageId":"180","endLine":56,"endColumn":40},{"ruleId":"170","severity":1,"message":"181","line":70,"column":8,"nodeType":"172","endLine":70,"endColumn":10,"suggestions":"188"},{"ruleId":"151","severity":1,"message":"168","line":1,"column":10,"nodeType":"153","messageId":"154","endLine":1,"endColumn":18},{"ruleId":"151","severity":1,"message":"189","line":7,"column":5,"nodeType":"153","messageId":"154","endLine":7,"endColumn":10},{"ruleId":"151","severity":1,"message":"190","line":8,"column":5,"nodeType":"153","messageId":"154","endLine":8,"endColumn":18},{"ruleId":"151","severity":1,"message":"191","line":38,"column":10,"nodeType":"153","messageId":"154","endLine":38,"endColumn":21},{"ruleId":"151","severity":1,"message":"192","line":38,"column":23,"nodeType":"153","messageId":"154","endLine":38,"endColumn":37},{"ruleId":"151","severity":1,"message":"176","line":39,"column":10,"nodeType":"153","messageId":"154","endLine":39,"endColumn":23},{"ruleId":"151","severity":1,"message":"193","line":48,"column":11,"nodeType":"153","messageId":"154","endLine":48,"endColumn":17},{"ruleId":"177","severity":1,"message":"178","line":55,"column":33,"nodeType":"179","messageId":"180","endLine":55,"endColumn":35},{"ruleId":"170","severity":1,"message":"181","line":70,"column":5,"nodeType":"172","endLine":70,"endColumn":7,"suggestions":"194"},"no-native-reassign",["195"],"no-negated-in-lhs",["196"],"no-unused-vars","'HStack' is defined but never used.","Identifier","unusedVar","'Text' is defined but never used.","'VStack' is defined but never used.","'Box' is defined but never used.","'FormErrorMessage' is defined but never used.","'FormHelperText' is defined but never used.","'input' is assigned a value but never used.","'setInput' is assigned a value but never used.","'hash' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'useEffect' is defined but never used.","'useState' is defined but never used.","'useWeb3React' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'account' and 'pointArr'. Either include them or remove the dependency array. You can also do a functional update 'setPointArr(p => ...)' if you only need 'pointArr' in the 'setPointArr' call.","ArrayExpression",["197"],["198"],["199"],"'typeListState' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'account'. Either include it or remove the dependency array.",["200"],"'tran' is assigned a value but never used.","'setTran' is assigned a value but never used.","'fromListState' is assigned a value but never used.","'setFromListState' is assigned a value but never used.","'fromList' is assigned a value but never used.",["201"],"'XAxis' is defined but never used.","'CartesianGrid' is defined but never used.","'toListState' is assigned a value but never used.","'setToListState' is assigned a value but never used.","'toList' is assigned a value but never used.",["202"],"no-global-assign","no-unsafe-negation",{"desc":"203","fix":"204"},{"desc":"203","fix":"205"},{"desc":"203","fix":"206"},{"desc":"207","fix":"208"},{"desc":"207","fix":"209"},{"desc":"207","fix":"210"},"Update the dependencies array to be: [account, pointArr]",{"range":"211","text":"212"},{"range":"213","text":"212"},{"range":"214","text":"212"},"Update the dependencies array to be: [account]",{"range":"215","text":"216"},{"range":"217","text":"216"},{"range":"218","text":"216"},[1036,1038],"[account, pointArr]",[1023,1025],[1101,1103],[2256,2258],"[account]",[2132,2134],[2073,2075]]